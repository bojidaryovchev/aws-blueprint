AWSTemplateFormatVersion: '2010-09-09'

Description: CloudFront > APIG 
  Redirect to SSL, custom DomainName, Edge Gzip, Angular redirects, S3 origin bucket

Parameters:

  Stage:
    Description: Deployment stage
    Type: String

  Branch:
    Description: Git branch
    Type: String    

  AcmCertificateArn:
    Description: The ARN of a certificate from AWS Certificate Manager (ACM)
    Type: String

  Route53HostedZoneId:
    Description: Hosted Zone ID where domain name for CloudFront will be made
    Type: String
    Default: Z2FDTNDATAQYW2

  CloudFrontCname:
    Description: Custom domain name to use (foo.yourdomain.com).  Will prefix this with [Stage]--
    Type: String
    Default: blah.yourdomain.com
    AllowedPattern : (([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9])\.){2,}([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]*[A-Za-z0-9]){2,}
    ConstraintDescription : Must be a valid DNS zone name WITHOUT trailing period      

Resources:  
#### S3 bucket that hosts Angular app
  AppBucket:
    Type: AWS::S3::Bucket    
    DeletionPolicy: 'Delete' #TODO: https://forums.aws.amazon.com/post!post.jspa?forumID=92&threadID=152800&messageID=859017&reply=true  
    Properties:
      BucketName: !Sub ${AWS::Region}--${Stage}--${Branch}--${CloudFrontCname}
      # ReplicationConfiguration:
      #   Role: !GetAtt [WorkItemBucketBackupRole, Arn]
      #   Rules:
      #   - Destination:
      #       Bucket: !Join ['', ['arn:aws:s3:::', !Join ['-', [!Ref 'AWS::Region', !Ref 'AWS::StackName',
      #               replicationbucket]]]]
      #       StorageClass: STANDARD
      #     Id: Backup
      #     Prefix: ''
      #     Status: Enabled
      AccessControl: PublicRead
      WebsiteConfiguration:
        IndexDocument: index.html
      VersioningConfiguration:
        Status: Enabled

  AppBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      PolicyDocument:
        Id: WebAppBucketPolicy
        Version: 2012-10-17
        Statement:
          - Sid: PublicReadForGetBucketObjects
            Effect: Allow
            Principal: '*'
            Action: 's3:GetObject'
            Resource: !Sub 
              - arn:aws:s3:::${AppBucket}/*
              - { AppBucket: !Ref AppBucket }
      Bucket: !Ref AppBucket    

  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudfront-cloudfrontoriginaccessidentity.html
  OriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: Access identity between CloudFront and S3 bucket          
#### End s3

#### Cloudfront and DNS stuff
  CloudFront:  
    Type: AWS::CloudFront::Distribution
    DependsOn: AppBucket
    Properties:
      DistributionConfig:
        Enabled: true
        IPV6Enabled: true
        HttpVersion: http2
        DefaultRootObject: index.html
        Comment: !Join [ '', [!Ref 'AWS::StackName', ' Angular CloudFront']]
        Aliases: 
          - !Sub ${Stage}--${CloudFrontCname}
          - !Sub ${CloudFrontCname}
        ViewerCertificate:
          AcmCertificateArn: !Ref AcmCertificateArn
          SslSupportMethod: sni-only
          MinimumProtocolVersion: TLSv1.1_2016
        Origins:
        - DomainName: !Sub ${AppBucket}.s3.amazonaws.com
          Id: myS3Origin
          S3OriginConfig:
            OriginAccessIdentity: !Sub origin-access-identity/cloudfront/${OriginAccessIdentity}
        DefaultCacheBehavior:
          AllowedMethods: ["GET", "HEAD", "OPTIONS"]
          CachedMethods: ["GET", "HEAD", "OPTIONS"]
          ForwardedValues:
            Headers:
            - Access-Control-Request-Headers
            - Access-Control-Request-Method
            - Origin
            - Authorization
            QueryString: false
            Cookies:
              Forward: none
          TargetOriginId: myS3Origin
          ViewerProtocolPolicy: redirect-to-https
          Compress: true
          DefaultTTL: 0
        CustomErrorResponses:
        - ErrorCachingMinTTL: 300
          ErrorCode: 404
          ResponseCode: 200
          ResponsePagePath: /index.html        
        - ErrorCachingMinTTL: 0
          ErrorCode: 400
        - ErrorCachingMinTTL: 1
          ErrorCode: 403
        - ErrorCachingMinTTL: 5
          ErrorCode: 500
  DNSARecord:    
    Type: AWS::Route53::RecordSet
    Properties:
      Comment: !Ref 'AWS::StackName'
      Name: !Sub ${Stage}--${CloudFrontCname}        
      Type: A
      HostedZoneName: !Join ['.', [ !Select [1, !Split ['.', !Ref CloudFrontCname]], !Select [2, !Split ['.', !Ref CloudFrontCname]], '']]
      AliasTarget:
        HostedZoneId: !Ref Route53HostedZoneId
        DNSName: !GetAtt CloudFront.DomainName
  DNSAAAARecord:    
    Type: AWS::Route53::RecordSet
    Properties:
      Comment: !Ref 'AWS::StackName'
      Name: !Sub ${Stage}--${CloudFrontCname}
      Type: AAAA
      HostedZoneName: !Join ['.', [ !Select [1, !Split ['.', !Ref CloudFrontCname]], !Select [2, !Split ['.', !Ref CloudFrontCname]], '']]
      AliasTarget:
        HostedZoneId: !Ref Route53HostedZoneId
        DNSName: !GetAtt CloudFront.DomainName

####END Cloudfront and DNS stuff  

Outputs:
  Version:
    Description: angular-custom-domain template version
    Value: 1.0.0

  CloudFront:
    Description: CloudFront ID
    Value: !Ref CloudFront
  CNAME:
    Description: Custom domain for Cloudfront
    Value: !Ref DNSARecord
  AppURL:
    Description: App URL
    Value: !Sub
        - https://${DN}
        - { DN: !Ref DNSARecord }
      
